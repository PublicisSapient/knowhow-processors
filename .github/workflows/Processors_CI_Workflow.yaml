name: Processors_CI_Workflow  # Define the name of the workflow

# Define when the workflow should trigger
on:
  pull_request:
    types:
      - labeled  # Trigger when a label is added
      - unlabeled  # Trigger when a label is removed
      - synchronize  # Trigger when commits are pushed to the PR
      - opened  # Trigger when a PR is opened
      - edited  # Trigger when a PR title or description is edited
      - ready_for_review  # Trigger when a draft PR is marked as ready
      - reopened  # Trigger when a closed PR is reopened
      - unlocked  # Trigger when a locked PR is unlocked
    branches: [master, develop, qa-master]  # Apply to these branches
  pull_request_review:
    types: [edited, dismissed]  # Trigger when a review is edited or dismissed
    branches: [master, develop, qa-master]
  workflow_dispatch:  # Allow manual triggering of the workflow

# Define environment variables
env:
  GITHUB_HEAD_NAME: $GITHUB_HEAD_REF  # Store the head branch name
  sonartoken: ${{ secrets.SONARQUBE_TOKEN }}  # Secret for SonarQube authentication
  sonarurl: ${{ secrets.SONARURL }}  # SonarQube URL stored in secrets

jobs:
 
  # ✅ Building & Testing Processors
  processors_ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set Up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: Clone & Build knowhow-common dependency
        run: |
          git clone https://github.com/PublicisSapient/knowhow-common.git
          cd knowhow-common
          mvn clean install -Ddockerfile.skip=true -X
          sudo apt-get update && sudo apt-get install -y libxml2-utils
          # Get version from knowhow-common pom.xml
          COMMON_VERSION=$(xmllint --xpath "string(//project/version)" knowhow-common/pom.xml)
          echo "Using common version: $COMMON_VERSION"
          ls 
          # Inject into dependencyManagement block in jira-processor/pom.xml
          sed -i "s|<version>.*</version>|<version>$COMMON_VERSION</version>|" \
            $(find . -name pom.xml | grep jira-processor | head -n 1)
      
      # - name: Extract common version and inject into Jira pom
      #   run: |
      #     sudo apt-get update && sudo apt-get install -y libxml2-utils
      #     # Get version from knowhow-common pom.xml
      #     cd knowhow-common
      #     COMMON_VERSION=$(xmllint --xpath "string(//project/version)" knowhow-common/pom.xml)
      #     echo "Using common version: $COMMON_VERSION"

      #     # Inject into dependencyManagement block in jira-processor/pom.xml
      #     sed -i "s|<version>.*</version>|<version>$COMMON_VERSION</version>|" \
      #       $(find . -name pom.xml | grep jira-processor | head -n 1)

      - name: Build & Test Jira Processor
        run: mvn clean install -Pjira-processor -Ddockerfile.skip=true

      - name: Build & Test Azure Board Processor
        run: mvn clean install -Pazure-board-processor -Ddockerfile.skip=true

      - name: Build & Test DevOps Processor
        run: mvn clean install -Pdevops-processor -Ddockerfile.skip=true

      - name: Build & Test Azure Pipeline Repo Processor
        run: mvn clean install -Pazure-pipeline-repo -Ddockerfile.skip=true

      - name: SonarQube Analysis - Processors
        run: |
          mvn sonar:sonar -Dsonar.projectKey=ENGINEERING.KPIDASHBOARD.PROCESSORS \
            -Dsonar.projectName=ENGINEERING.KPIDASHBOARD.PROCESSORS \
            -Dsonar.branch.name=${{ env.GITHUB_HEAD_NAME }} \
            -Dsonar.host.url=${{ secrets.SONARQUBE_HOST }} \
            -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }} -f pom.xml

      - name: Check SonarQube Quality Gate - Processors
        run: |
          chmod +x SonarQG.sh
          ./SonarQG.sh ./target/sonar/report-task.txt

  # ✅ Final Job to Ensure Completion
  GitHub_CI_Complete:
    needs: [processors_ci]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check Job Status
        run: |
          if [[ "${{ needs.processors_ci.result }}" == "failure" || \
                "${{ needs.processors_ci.result }}" == "cancelled" ]]; then
            echo "❌ One or more jobs failed or were cancelled. Failing CI."
            exit 1
          else
            echo "✅ All relevant jobs have passed."
          fi